// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datatypes.proto
#ifndef GRPC_datatypes_2eproto__INCLUDED
#define GRPC_datatypes_2eproto__INCLUDED

#include "datatypes.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace economy {

class TransportService final {
 public:
  static constexpr char const* service_full_name() {
    return "economy.TransportService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::economy::DataReply>> GetData(::grpc::ClientContext* context, const ::economy::DataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::economy::DataReply>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>> AsyncGetData(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::economy::CurrencyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>> AsyncChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>>(AsyncChangeCurrencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>> PrepareAsyncChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>>(PrepareAsyncChangeCurrencyRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::economy::DataReply>* GetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::economy::DataReply>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>* AsyncChangeCurrencyRaw(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::economy::CurrencyReply>* PrepareAsyncChangeCurrencyRaw(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::economy::DataReply>> GetData(::grpc::ClientContext* context, const ::economy::DataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::economy::DataReply>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::economy::DataReply>> AsyncGetData(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::economy::DataReply>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::economy::DataReply>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::economy::DataReply>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    ::grpc::Status ChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::economy::CurrencyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>> AsyncChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>>(AsyncChangeCurrencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>> PrepareAsyncChangeCurrency(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>>(PrepareAsyncChangeCurrencyRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::economy::DataReply>* GetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request) override;
    ::grpc::ClientAsyncReader< ::economy::DataReply>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::economy::DataReply>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::economy::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>* AsyncChangeCurrencyRaw(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::economy::CurrencyReply>* PrepareAsyncChangeCurrencyRaw(::grpc::ClientContext* context, const ::economy::CurrencyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_GetData_;
    const ::grpc::RpcMethod rpcmethod_ChangeCurrency_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::economy::DataRequest* request, ::grpc::ServerWriter< ::economy::DataReply>* writer);
    virtual ::grpc::Status ChangeCurrency(::grpc::ServerContext* context, const ::economy::CurrencyRequest* request, ::economy::CurrencyReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::economy::DataRequest* request, ::grpc::ServerWriter< ::economy::DataReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::economy::DataRequest* request, ::grpc::ServerAsyncWriter< ::economy::DataReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeCurrency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ChangeCurrency() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ChangeCurrency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeCurrency(::grpc::ServerContext* context, const ::economy::CurrencyRequest* request, ::economy::CurrencyReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeCurrency(::grpc::ServerContext* context, ::economy::CurrencyRequest* request, ::grpc::ServerAsyncResponseWriter< ::economy::CurrencyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetData<WithAsyncMethod_ChangeCurrency<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::economy::DataRequest* request, ::grpc::ServerWriter< ::economy::DataReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeCurrency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ChangeCurrency() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ChangeCurrency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeCurrency(::grpc::ServerContext* context, const ::economy::CurrencyRequest* request, ::economy::CurrencyReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeCurrency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ChangeCurrency() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::economy::CurrencyRequest, ::economy::CurrencyReply>(std::bind(&WithStreamedUnaryMethod_ChangeCurrency<BaseClass>::StreamedChangeCurrency, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ChangeCurrency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeCurrency(::grpc::ServerContext* context, const ::economy::CurrencyRequest* request, ::economy::CurrencyReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeCurrency(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::economy::CurrencyRequest,::economy::CurrencyReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ChangeCurrency<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::economy::DataRequest, ::economy::DataReply>(std::bind(&WithSplitStreamingMethod_GetData<BaseClass>::StreamedGetData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::economy::DataRequest* request, ::grpc::ServerWriter< ::economy::DataReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::economy::DataRequest,::economy::DataReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetData<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetData<WithStreamedUnaryMethod_ChangeCurrency<Service > > StreamedService;
};

}  // namespace economy


#endif  // GRPC_datatypes_2eproto__INCLUDED
