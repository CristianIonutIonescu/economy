// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes.proto

#ifndef PROTOBUF_datatypes_2eproto__INCLUDED
#define PROTOBUF_datatypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_datatypes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProtoDateImpl();
void InitDefaultsProtoDate();
void InitDefaultsCurrencyImpl();
void InitDefaultsCurrency();
void InitDefaultsDataPayloadImpl();
void InitDefaultsDataPayload();
void InitDefaultsDataRequestImpl();
void InitDefaultsDataRequest();
void InitDefaultsDataReplyImpl();
void InitDefaultsDataReply();
void InitDefaultsCurrencyRequestImpl();
void InitDefaultsCurrencyRequest();
void InitDefaultsCurrencyReplyImpl();
void InitDefaultsCurrencyReply();
inline void InitDefaults() {
  InitDefaultsProtoDate();
  InitDefaultsCurrency();
  InitDefaultsDataPayload();
  InitDefaultsDataRequest();
  InitDefaultsDataReply();
  InitDefaultsCurrencyRequest();
  InitDefaultsCurrencyReply();
}
}  // namespace protobuf_datatypes_2eproto
namespace economy {
class Currency;
class CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
class CurrencyReply;
class CurrencyReplyDefaultTypeInternal;
extern CurrencyReplyDefaultTypeInternal _CurrencyReply_default_instance_;
class CurrencyRequest;
class CurrencyRequestDefaultTypeInternal;
extern CurrencyRequestDefaultTypeInternal _CurrencyRequest_default_instance_;
class DataPayload;
class DataPayloadDefaultTypeInternal;
extern DataPayloadDefaultTypeInternal _DataPayload_default_instance_;
class DataReply;
class DataReplyDefaultTypeInternal;
extern DataReplyDefaultTypeInternal _DataReply_default_instance_;
class DataRequest;
class DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class ProtoDate;
class ProtoDateDefaultTypeInternal;
extern ProtoDateDefaultTypeInternal _ProtoDate_default_instance_;
}  // namespace economy
namespace economy {

enum CurrencyType {
  RON = 0,
  EUR = 1,
  USD = 2,
  CurrencyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CurrencyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CurrencyType_IsValid(int value);
const CurrencyType CurrencyType_MIN = RON;
const CurrencyType CurrencyType_MAX = USD;
const int CurrencyType_ARRAYSIZE = CurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor();
inline const ::std::string& CurrencyType_Name(CurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrencyType_descriptor(), value);
}
inline bool CurrencyType_Parse(
    const ::std::string& name, CurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrencyType>(
    CurrencyType_descriptor(), name, value);
}
// ===================================================================

class ProtoDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.ProtoDate) */ {
 public:
  ProtoDate();
  virtual ~ProtoDate();

  ProtoDate(const ProtoDate& from);

  inline ProtoDate& operator=(const ProtoDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoDate(ProtoDate&& from) noexcept
    : ProtoDate() {
    *this = ::std::move(from);
  }

  inline ProtoDate& operator=(ProtoDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoDate* internal_default_instance() {
    return reinterpret_cast<const ProtoDate*>(
               &_ProtoDate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProtoDate* other);
  friend void swap(ProtoDate& a, ProtoDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoDate* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoDate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoDate& from);
  void MergeFrom(const ProtoDate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 day = 1;
  void clear_day();
  static const int kDayFieldNumber = 1;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // int32 month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // int32 year = 3;
  void clear_year();
  static const int kYearFieldNumber = 3;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:economy.ProtoDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 year_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsProtoDateImpl();
};
// -------------------------------------------------------------------

class Currency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.Currency) */ {
 public:
  Currency();
  virtual ~Currency();

  Currency(const Currency& from);

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(Currency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Currency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Currency* other);
  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const PROTOBUF_FINAL { return New(NULL); }

  Currency* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Currency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double conversion_rate = 2;
  void clear_conversion_rate();
  static const int kConversionRateFieldNumber = 2;
  double conversion_rate() const;
  void set_conversion_rate(double value);

  // .economy.CurrencyType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::economy::CurrencyType type() const;
  void set_type(::economy::CurrencyType value);

  // @@protoc_insertion_point(class_scope:economy.Currency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double conversion_rate_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsCurrencyImpl();
};
// -------------------------------------------------------------------

class DataPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.DataPayload) */ {
 public:
  DataPayload();
  virtual ~DataPayload();

  DataPayload(const DataPayload& from);

  inline DataPayload& operator=(const DataPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataPayload(DataPayload&& from) noexcept
    : DataPayload() {
    *this = ::std::move(from);
  }

  inline DataPayload& operator=(DataPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataPayload* internal_default_instance() {
    return reinterpret_cast<const DataPayload*>(
               &_DataPayload_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DataPayload* other);
  friend void swap(DataPayload& a, DataPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataPayload* New() const PROTOBUF_FINAL { return New(NULL); }

  DataPayload* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataPayload& from);
  void MergeFrom(const DataPayload& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .economy.ProtoDate date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const ::economy::ProtoDate& date() const;
  ::economy::ProtoDate* release_date();
  ::economy::ProtoDate* mutable_date();
  void set_allocated_date(::economy::ProtoDate* date);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:economy.DataPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::economy::ProtoDate* date_;
  float value_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsDataPayloadImpl();
};
// -------------------------------------------------------------------

class DataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.DataRequest) */ {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DataRequest* other);
  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .economy.ProtoDate begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  const ::economy::ProtoDate& begin() const;
  ::economy::ProtoDate* release_begin();
  ::economy::ProtoDate* mutable_begin();
  void set_allocated_begin(::economy::ProtoDate* begin);

  // .economy.ProtoDate end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::economy::ProtoDate& end() const;
  ::economy::ProtoDate* release_end();
  ::economy::ProtoDate* mutable_end();
  void set_allocated_end(::economy::ProtoDate* end);

  // @@protoc_insertion_point(class_scope:economy.DataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::economy::ProtoDate* begin_;
  ::economy::ProtoDate* end_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsDataRequestImpl();
};
// -------------------------------------------------------------------

class DataReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.DataReply) */ {
 public:
  DataReply();
  virtual ~DataReply();

  DataReply(const DataReply& from);

  inline DataReply& operator=(const DataReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataReply(DataReply&& from) noexcept
    : DataReply() {
    *this = ::std::move(from);
  }

  inline DataReply& operator=(DataReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataReply* internal_default_instance() {
    return reinterpret_cast<const DataReply*>(
               &_DataReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DataReply* other);
  friend void swap(DataReply& a, DataReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataReply* New() const PROTOBUF_FINAL { return New(NULL); }

  DataReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataReply& from);
  void MergeFrom(const DataReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .economy.DataPayload content = 1;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::economy::DataPayload& content(int index) const;
  ::economy::DataPayload* mutable_content(int index);
  ::economy::DataPayload* add_content();
  ::google::protobuf::RepeatedPtrField< ::economy::DataPayload >*
      mutable_content();
  const ::google::protobuf::RepeatedPtrField< ::economy::DataPayload >&
      content() const;

  // @@protoc_insertion_point(class_scope:economy.DataReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::economy::DataPayload > content_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsDataReplyImpl();
};
// -------------------------------------------------------------------

class CurrencyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.CurrencyRequest) */ {
 public:
  CurrencyRequest();
  virtual ~CurrencyRequest();

  CurrencyRequest(const CurrencyRequest& from);

  inline CurrencyRequest& operator=(const CurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrencyRequest(CurrencyRequest&& from) noexcept
    : CurrencyRequest() {
    *this = ::std::move(from);
  }

  inline CurrencyRequest& operator=(CurrencyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const CurrencyRequest*>(
               &_CurrencyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CurrencyRequest* other);
  friend void swap(CurrencyRequest& a, CurrencyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrencyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CurrencyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurrencyRequest& from);
  void MergeFrom(const CurrencyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurrencyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .economy.CurrencyType new_currency = 1;
  void clear_new_currency();
  static const int kNewCurrencyFieldNumber = 1;
  ::economy::CurrencyType new_currency() const;
  void set_new_currency(::economy::CurrencyType value);

  // @@protoc_insertion_point(class_scope:economy.CurrencyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int new_currency_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsCurrencyRequestImpl();
};
// -------------------------------------------------------------------

class CurrencyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:economy.CurrencyReply) */ {
 public:
  CurrencyReply();
  virtual ~CurrencyReply();

  CurrencyReply(const CurrencyReply& from);

  inline CurrencyReply& operator=(const CurrencyReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrencyReply(CurrencyReply&& from) noexcept
    : CurrencyReply() {
    *this = ::std::move(from);
  }

  inline CurrencyReply& operator=(CurrencyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyReply* internal_default_instance() {
    return reinterpret_cast<const CurrencyReply*>(
               &_CurrencyReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CurrencyReply* other);
  friend void swap(CurrencyReply& a, CurrencyReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrencyReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CurrencyReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CurrencyReply& from);
  void MergeFrom(const CurrencyReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CurrencyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .economy.Currency currency = 1;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  const ::economy::Currency& currency() const;
  ::economy::Currency* release_currency();
  ::economy::Currency* mutable_currency();
  void set_allocated_currency(::economy::Currency* currency);

  // @@protoc_insertion_point(class_scope:economy.CurrencyReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::economy::Currency* currency_;
  mutable int _cached_size_;
  friend struct ::protobuf_datatypes_2eproto::TableStruct;
  friend void ::protobuf_datatypes_2eproto::InitDefaultsCurrencyReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoDate

// int32 day = 1;
inline void ProtoDate::clear_day() {
  day_ = 0;
}
inline ::google::protobuf::int32 ProtoDate::day() const {
  // @@protoc_insertion_point(field_get:economy.ProtoDate.day)
  return day_;
}
inline void ProtoDate::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:economy.ProtoDate.day)
}

// int32 month = 2;
inline void ProtoDate::clear_month() {
  month_ = 0;
}
inline ::google::protobuf::int32 ProtoDate::month() const {
  // @@protoc_insertion_point(field_get:economy.ProtoDate.month)
  return month_;
}
inline void ProtoDate::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:economy.ProtoDate.month)
}

// int32 year = 3;
inline void ProtoDate::clear_year() {
  year_ = 0;
}
inline ::google::protobuf::int32 ProtoDate::year() const {
  // @@protoc_insertion_point(field_get:economy.ProtoDate.year)
  return year_;
}
inline void ProtoDate::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:economy.ProtoDate.year)
}

// -------------------------------------------------------------------

// Currency

// .economy.CurrencyType type = 1;
inline void Currency::clear_type() {
  type_ = 0;
}
inline ::economy::CurrencyType Currency::type() const {
  // @@protoc_insertion_point(field_get:economy.Currency.type)
  return static_cast< ::economy::CurrencyType >(type_);
}
inline void Currency::set_type(::economy::CurrencyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:economy.Currency.type)
}

// double conversion_rate = 2;
inline void Currency::clear_conversion_rate() {
  conversion_rate_ = 0;
}
inline double Currency::conversion_rate() const {
  // @@protoc_insertion_point(field_get:economy.Currency.conversion_rate)
  return conversion_rate_;
}
inline void Currency::set_conversion_rate(double value) {
  
  conversion_rate_ = value;
  // @@protoc_insertion_point(field_set:economy.Currency.conversion_rate)
}

// -------------------------------------------------------------------

// DataPayload

// .economy.ProtoDate date = 1;
inline bool DataPayload::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline void DataPayload::clear_date() {
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
}
inline const ::economy::ProtoDate& DataPayload::date() const {
  const ::economy::ProtoDate* p = date_;
  // @@protoc_insertion_point(field_get:economy.DataPayload.date)
  return p != NULL ? *p : *reinterpret_cast<const ::economy::ProtoDate*>(
      &::economy::_ProtoDate_default_instance_);
}
inline ::economy::ProtoDate* DataPayload::release_date() {
  // @@protoc_insertion_point(field_release:economy.DataPayload.date)
  
  ::economy::ProtoDate* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::economy::ProtoDate* DataPayload::mutable_date() {
  
  if (date_ == NULL) {
    date_ = new ::economy::ProtoDate;
  }
  // @@protoc_insertion_point(field_mutable:economy.DataPayload.date)
  return date_;
}
inline void DataPayload::set_allocated_date(::economy::ProtoDate* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete date_;
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:economy.DataPayload.date)
}

// float value = 2;
inline void DataPayload::clear_value() {
  value_ = 0;
}
inline float DataPayload::value() const {
  // @@protoc_insertion_point(field_get:economy.DataPayload.value)
  return value_;
}
inline void DataPayload::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:economy.DataPayload.value)
}

// -------------------------------------------------------------------

// DataRequest

// .economy.ProtoDate begin = 1;
inline bool DataRequest::has_begin() const {
  return this != internal_default_instance() && begin_ != NULL;
}
inline void DataRequest::clear_begin() {
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) {
    delete begin_;
  }
  begin_ = NULL;
}
inline const ::economy::ProtoDate& DataRequest::begin() const {
  const ::economy::ProtoDate* p = begin_;
  // @@protoc_insertion_point(field_get:economy.DataRequest.begin)
  return p != NULL ? *p : *reinterpret_cast<const ::economy::ProtoDate*>(
      &::economy::_ProtoDate_default_instance_);
}
inline ::economy::ProtoDate* DataRequest::release_begin() {
  // @@protoc_insertion_point(field_release:economy.DataRequest.begin)
  
  ::economy::ProtoDate* temp = begin_;
  begin_ = NULL;
  return temp;
}
inline ::economy::ProtoDate* DataRequest::mutable_begin() {
  
  if (begin_ == NULL) {
    begin_ = new ::economy::ProtoDate;
  }
  // @@protoc_insertion_point(field_mutable:economy.DataRequest.begin)
  return begin_;
}
inline void DataRequest::set_allocated_begin(::economy::ProtoDate* begin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete begin_;
  }
  if (begin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      begin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin, submessage_arena);
    }
    
  } else {
    
  }
  begin_ = begin;
  // @@protoc_insertion_point(field_set_allocated:economy.DataRequest.begin)
}

// .economy.ProtoDate end = 2;
inline bool DataRequest::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void DataRequest::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}
inline const ::economy::ProtoDate& DataRequest::end() const {
  const ::economy::ProtoDate* p = end_;
  // @@protoc_insertion_point(field_get:economy.DataRequest.end)
  return p != NULL ? *p : *reinterpret_cast<const ::economy::ProtoDate*>(
      &::economy::_ProtoDate_default_instance_);
}
inline ::economy::ProtoDate* DataRequest::release_end() {
  // @@protoc_insertion_point(field_release:economy.DataRequest.end)
  
  ::economy::ProtoDate* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::economy::ProtoDate* DataRequest::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::economy::ProtoDate;
  }
  // @@protoc_insertion_point(field_mutable:economy.DataRequest.end)
  return end_;
}
inline void DataRequest::set_allocated_end(::economy::ProtoDate* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:economy.DataRequest.end)
}

// -------------------------------------------------------------------

// DataReply

// repeated .economy.DataPayload content = 1;
inline int DataReply::content_size() const {
  return content_.size();
}
inline void DataReply::clear_content() {
  content_.Clear();
}
inline const ::economy::DataPayload& DataReply::content(int index) const {
  // @@protoc_insertion_point(field_get:economy.DataReply.content)
  return content_.Get(index);
}
inline ::economy::DataPayload* DataReply::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:economy.DataReply.content)
  return content_.Mutable(index);
}
inline ::economy::DataPayload* DataReply::add_content() {
  // @@protoc_insertion_point(field_add:economy.DataReply.content)
  return content_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::economy::DataPayload >*
DataReply::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:economy.DataReply.content)
  return &content_;
}
inline const ::google::protobuf::RepeatedPtrField< ::economy::DataPayload >&
DataReply::content() const {
  // @@protoc_insertion_point(field_list:economy.DataReply.content)
  return content_;
}

// -------------------------------------------------------------------

// CurrencyRequest

// .economy.CurrencyType new_currency = 1;
inline void CurrencyRequest::clear_new_currency() {
  new_currency_ = 0;
}
inline ::economy::CurrencyType CurrencyRequest::new_currency() const {
  // @@protoc_insertion_point(field_get:economy.CurrencyRequest.new_currency)
  return static_cast< ::economy::CurrencyType >(new_currency_);
}
inline void CurrencyRequest::set_new_currency(::economy::CurrencyType value) {
  
  new_currency_ = value;
  // @@protoc_insertion_point(field_set:economy.CurrencyRequest.new_currency)
}

// -------------------------------------------------------------------

// CurrencyReply

// .economy.Currency currency = 1;
inline bool CurrencyReply::has_currency() const {
  return this != internal_default_instance() && currency_ != NULL;
}
inline void CurrencyReply::clear_currency() {
  if (GetArenaNoVirtual() == NULL && currency_ != NULL) {
    delete currency_;
  }
  currency_ = NULL;
}
inline const ::economy::Currency& CurrencyReply::currency() const {
  const ::economy::Currency* p = currency_;
  // @@protoc_insertion_point(field_get:economy.CurrencyReply.currency)
  return p != NULL ? *p : *reinterpret_cast<const ::economy::Currency*>(
      &::economy::_Currency_default_instance_);
}
inline ::economy::Currency* CurrencyReply::release_currency() {
  // @@protoc_insertion_point(field_release:economy.CurrencyReply.currency)
  
  ::economy::Currency* temp = currency_;
  currency_ = NULL;
  return temp;
}
inline ::economy::Currency* CurrencyReply::mutable_currency() {
  
  if (currency_ == NULL) {
    currency_ = new ::economy::Currency;
  }
  // @@protoc_insertion_point(field_mutable:economy.CurrencyReply.currency)
  return currency_;
}
inline void CurrencyReply::set_allocated_currency(::economy::Currency* currency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete currency_;
  }
  if (currency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      currency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    
  } else {
    
  }
  currency_ = currency;
  // @@protoc_insertion_point(field_set_allocated:economy.CurrencyReply.currency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace economy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::economy::CurrencyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::economy::CurrencyType>() {
  return ::economy::CurrencyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datatypes_2eproto__INCLUDED
